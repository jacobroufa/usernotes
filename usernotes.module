<?php
/*********
 * Usernotes
 *
 * Provides an interface for easily attaching notes to a user.
 */

/**
 * Implements hook_entity_info().
 */
function usernotes_entity_info() {
  $usernotes_info['usernotes'] = array(
    'label' => t('Usernotes'),
    'controller class' => 'EntityAPIController',
    'entity class' => 'Entity',
    'base table' => 'usernotes',
    'revision table' => 'usernotes_revision',
    'load hook' => 'usernotes_load',
    'uri callback' => 'usernotes_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'unid',
      'revision' => 'vid',
      'label' => FALSE,
      'bundle' => 'unotes',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'unotes',
    ),
    'admin ui' => array(
      'path' => 'admin/config/people/usernotes',
      'access arguments' => array('administer usernotes'),
    ),
    'view modes' => array(
      'list' => array(
        'label' => t('Default'),
        'custom settings' => FALSE,
      ),
    ),
    'module' => 'usernotes',
    'access callback' => 'usernotes_access',
    'creation callback' => 'usernotes_create',
  );

  return $usernotes_info;
}

/**
 * Implements hook_entity_info_alter().
 */
function usernotes_entity_info_alter(&$entity_info) {
  $entity_info['usernotes']['bundles'] = array(
    'admin' => array(
      'path' => 'admin/config/people/usernotes',
      'access arguments' => array('administer usernotes'),
    ),
  );
}

/**
 * URI callback for Usernotes.
 */
function usernotes_uri($usernotes) {
  return array(
    'path' => 'note/' . $usernotes->unid,
  );
}

/**
 * Implements hook_permission().
 */
function usernotes_permission() {
  $permissions = array(
    'administer usernotes' => array(
      'title' => t('Administer Usernotes'),
      'description' => t('Provides full access to Usernotes. Should only be given to administrators or staff roles.'),
    ),
    'own usernotes' => array(
      'title' => t('Create, Edit, Delete and View Own Usernotes'),
      'description' => t('Create, Edit, Delete and View Usernotes attached to your own account'),
    ),
  );

  return $permissions;
}

/**
 * Access callback.
 */
function usernotes_access($op, $usernotes = NULL, $account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  if (user_access('administer usernotes', $account)) {
    return TRUE;
  }
  if (isset($usernotes)) {
    if (user_access('own usernotes', $account) && ($usernotes->uid == $account->uid)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_menu().
 */
function usernotes_menu() {
  $items['admin/config/people/usernotes'] = array(
    'title' => 'Usernotes Admin',
    'description' => 'Manage Usernotes (as if there were anything to actually manage...)',
    'page callback' => 'usernotes_admin_info',
    'access arguments' => array('administer usernotes'),
  );

  return $items;
}

/**
 * Admin page callback.
 */
function usernotes_admin_info() {
  return ('Welcome to the administration page for your Usernotes! Something might go here eventually....');
}

/**
 * Implements entity_load().
 */
function usernotes_load($unid = NULL, $reset = FALSE) {
  $unids = (isset ($unid) ? array($unid) : array());
  $usernotes = usernotes_load_multiple($unids, $reset);
  return $usernotes ? reset ($usernotes) : FALSE;
}

function usernotes_load_multiple($unids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('usernotes', $unids, $conditions, $reset);
}

/**
 * Implements entity_save().
 */
function usernotes_save($usernotes) {
  if ($usernotes->is_new) {
    $unid = db_insert('usernotes')
      ->useDefaults(array('unid'))
      ->fields(array(
        'created' => REQUEST_TIME,
        'changed' => REQUEST_TIME,
        ))
      ->execute();
    $usernotes->unid = $unid;
    $usernotes->revision = TRUE;
  }
  if (!empty($usernotes->revision)) {
    $vid = db_insert('usernotes_revision')
      ->useDefaults(array('vid'))
      ->fields(array(
        'unid' => $usernotes->unid,
        'changed' => REQUEST_TIME,
        ))
      ->execute();
      $usernotes->vid = $vid;
    db_update('usernotes')
      ->condition('unid', $usernotes->unid)
      ->fields(array(
        'vid' => $usernotes->vid,
        ))
      ->execute();
  }
  if ($usernotes->is_new) {
    field_attach_insert('usernotes', $usernotes);
  }
  else {
    field_attach_update('usernotes', $usernotes);
  }

  return $usernotes->unid;
}

?>
